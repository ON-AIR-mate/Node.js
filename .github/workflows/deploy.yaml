name: Deploy to AWS EC2

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run ESLint
      run: npm run lint

    - name: Check code formatting
      run: npm run check

    - name: Build application
      run: npm run build

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.EC2_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

    - name: Deploy to EC2
      run: |
        ssh -i ~/.ssh/id_rsa ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} '
          cd /home/ec2-user/on-air-mate &&
          
          # Pull latest code
          git pull origin main &&
          
          # Install dependencies
          npm ci &&
          
          # Prisma database migration
          npx prisma generate &&
          npx prisma db push &&
          
          # Build application
          npm run build &&
          
          # Restart PM2 application (use actual process name)
          pm2 restart onairmate-api --update-env || pm2 start npm --name "onairmate-api" -- run dev &&
          
          # Check if application is running
          sleep 5 &&
          pm2 status &&
          
          # Test application health
          curl -f http://localhost:3000/ || exit 1
        '

    - name: Verify deployment
      run: |
        # Wait a moment for the service to fully start
        sleep 10
        
        echo "Deployment completed successfully!"

    - name: Notify deployment status
      if: always()
      run: |
        if [ ${{ job.status }} == 'success' ]; then
          echo "Deployment successful to EC2: ${{ secrets.EC2_HOST }}"
        else
          echo "Deployment failed to EC2: ${{ secrets.EC2_HOST }}"
        fi
