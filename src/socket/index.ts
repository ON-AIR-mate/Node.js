import { Server } from 'socket.io';
import { Server as HTTPServer } from 'http';
import chatHandler from './chatHandler';
import { createAdapter } from '@socket.io/redis-adapter';
import Redis from 'ioredis';
import { findUserByToken } from '../services/authServices.js';
import { onlineUser, offlineUser } from './redisManager';

let io: Server;

export const initSocketServer = (server: HTTPServer) => {
  io = new Server(server, {
    cors: {
      origin: '*', // ÌïÑÏöî Ïãú CORS Ï†úÌïú
      methods: ['GET', 'POST'],
    },
  });

  io.use(async (socket, next) => {
    const token = socket.handshake.auth?.token;

    if (!token) {
      return next(new Error('Authentication error: No token'));
    }

    const user = await findUserByToken(token);
    if (!user) {
      return next(new Error('Ïú†Ìö®ÌïòÏßÄ ÏïäÏùÄ ÌÜ†ÌÅ∞ÏûÖÎãàÎã§.'));
    }
    socket.data.user = {
      id: user.userId.toString(),
      nickname: user.nickname,
      userId: user.userId,
    }; // socket.dataÏóê ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ Ï†ÄÏû•

    console.log('üîóÏú†Ï†Ä: ', socket.data.user.id, ', ', socket.data.user.nickname);
    next(); // Îã§Ïùå ÎØ∏Îì§Ïõ®Ïñ¥ ÎòêÎäî Ïó∞Í≤∞ ÏäπÏù∏
  });

  io.use((socket, next) => {
    const rawUser = socket.handshake.auth.user;
    if (!rawUser) return next(new Error('no user'));
    socket.data.user = JSON.parse(rawUser);
    next();
  });

  const pubClient = new Redis({
    host: process.env.REDIS_HOST,
    port: Number(process.env.REDIS_PORT) || 6379,
    password: process.env.REDIS_PASSWORD,
  });

  const subClient = pubClient.duplicate();

  io.adapter(createAdapter(pubClient, subClient));
  console.log('Redis adapter set');

  io.on('connection', socket => {
    const user = socket.data.user;
    console.log('üöÄ Ïú†Ï†Ä Ï†ëÏÜç:', user.nickname, ', ÏÜåÏ∫£: ', socket.id);
    onlineUser(user.id, socket.id);

    chatHandler(io!, socket);

    socket.on('disconnect', () => {
      offlineUser(socket.data.user.id, socket.id);
      console.log('‚ùå Ïó∞Í≤∞ Ìï¥Ï†ú:', socket.id);
    });
  });

  return io;
};

/**
 * Returns the initialized Socket.IO server instance.
 *
 * @returns The Socket.IO server instance
 * @throws If the server has not been initialized
 */
export function getIO(): Server {
  if (!io) {
    throw new Error('Socket.io not initialized');
  }
  return io;
}
